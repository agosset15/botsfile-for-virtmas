from yoomoney import Client
from yoomoney import Quickpay
from aiogram.dispatcher.filters import Command
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from sys import exit
from replit import db

bot_token = "5116068253:AAFkw9zZTPm-0LrLA82B7klhl9yF6xXiJxU"
if not bot_token:
    exit("Error: no token provided")

bot = Bot(token=bot_token)


# phone_chat_id =
# text =

gift_purse = 0

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# Authorize(
#       client_id="1A206994431D361204927B957303CBF2EC89ACE4DAFE12D35071E745401D3B54",
#       redirect_uri="https://t.me/adbot_ch_bot?code=659419",
#       scope=["account-info",
#              "operation-history",
#              "operation-details",
#              "incoming-transfers",
#              "payment-p2p",
#              "payment-shop",
#              ]
#       )

token = "4100117410709216.91A707B6031CEB98B302232BE7214D11849168D33AC6D3F305BE12190B0D6BF638D08FEBA8F1258BB87" \
        "65231AAED09DFA9B094EBEFE4D72AA930FAFFF872D6B87ECA99CB1AACB497D5AA1690B67685D72AB19678938F25374EB4F38" \
        "85E4692E2A907E1AB60C8C65BC3C15649D4FB56BF4D6F1A903239DD95531B7E005AD6D959"


client = Client(token)
user = client.account_info()
print()
print("Account number:", user.account)
print("Account balance:", user.balance)
# print("Account currency code in ISO 4217 format:", user.currency)
print("Account status:", user.account_status)
print("Account type:", user.account_type)
print()
print()
# print("Extended balance information:")
# for pair in vars(user.balance_details):
#     print("\t-->", pair, ":", vars(user.balance_details).get(pair))
# print("Information about linked bank cards:")
# cards = user.cards_linked
#  if len(cards) != 0:
#     for card in cards:
#         print(card.pan_fragment, " - ", card.type)
# else:
#     print("No card is linked to the account")


cost = "20—Ä"


def get_startkeyboard():
    buttons = [
        types.InlineKeyboardButton(text="–ú–æ–π –∫–∞–Ω–∞–ª —Å –º–µ–º—á–∏–∫–∞–º–∏.",
                                   callback_data="lh_mem"),
        types.InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
                                   callback_data="local_chat"),
        types.InlineKeyboardButton(text="–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ.",
                                   callback_data="pl_pay"),
        types.InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –Ω–æ–≤—É—é —Ä–µ–∫–ª–∞–º—É.",
                                   callback_data="new_ad")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    return keyboard

def get_vip():
    buttons = [
        types.InlineKeyboardButton(text="–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ—Ö–æ–¥",
                                   callback_data="send_ad")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


def vip_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–û—Ç—á–µ—Ç –æ —Ä–µ–∫–ª–∞–º–∞—Ö", "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"]
    keyboard.add(*buttons)
    return keyboard


def extract_unique_code(text):
    return text.split()[1] if len(text.split()) > 1 else None



@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
  await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ –±–æ—Ç–µ –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Ä–µ–∫–ª–∞–º—ã, –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –µ–µ –≤–æ –º–Ω–æ–≥–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö"
        " –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!\n–ö–∞–Ω–∞–ª—ã —Å 1–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
        reply_markup=get_startkeyboard())
  unique_code = extract_unique_code(message.text)
  if unique_code:
    db["new_ref_us"] = message.from_user.id, unique_code
  else:
    pass
  if message.from_user.id == 900645059:
     await message.answer("üëë–¢—ã –≤ VIP-–∫–µ!", reply_markup=vip_menu())
     await message.answer(".", reply_markup=get_vip())
     print()
     print(f"–í–ª–∞–¥–µ–ª–µ—Ü –≤–æ—à–µ–ª –≤ –ø—Ä–∏–≤–∞—Ç–∫—É!")



@dp.message_handler(Text(equals="–û—Ç—á–µ—Ç –æ —Ä–µ–∫–ª–∞–º–∞—Ö"))
async def db_open(message: types.Message):
  value = db["key"]
  refers = db["new_ref_us"]
  await message.answer(refers)
  await message.answer(value, reply_markup=get_startkeyboard())


@dp.message_handler(Text(equals="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"))
async def debug(message: types.Message):

    await message.answer("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞!", reply_markup=get_startkeyboard())
  

@dp.callback_query_handler(text="lh_mem")
async def link_mems(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–°–º–µ—à–Ω–æ–π –Æ–º–æ—Ä",
                                   url="tg://resolve?domain=agosset15_mem")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.reply(
        "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å –º–µ–º—á–∏–∫–∞–º–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard)

@dp.message_handler(Text(equals="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"))
async def cmd_debug(message: types.Message):
  value = db["key"]
  print(value)



@dp.callback_query_handler(text="new_ad")
async def new_ad(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–†–µ–∫–ª–∞–º–∞ –≤ 1 –∫–∞–Ω–∞–ª(200+–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)",
                                   callback_data="1_ch_ad"),
        types.InlineKeyboardButton(text="–†–µ–∫–ª–∞–º–∞ –≤ 2 –∫–∞–Ω–∞–ª–∞(500+–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)",
                                   callback_data="2_ch_ad"),
        types.InlineKeyboardButton(text="–†–µ–∫–ª–∞–º–∞ –≤ 5 –∫–∞–Ω–∞–ª–æ–≤(1k+–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)",
                                   callback_data="5_ch_ad")
    ]
    keyboard_ad = types.InlineKeyboardMarkup(row_width=1)
    keyboard_ad.add(*buttons)
    await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø:", reply_markup=keyboard_ad)


@dp.callback_query_handler(text="1_ch_ad")
async def new_ad1(call: types.CallbackQuery):
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ä–µ–∫–ª–∞–º—É –Ω–∞—á–∏–Ω–∞—è —Å /ad1")


@dp.message_handler(commands="ad1")
async def text_added1(message: types.Message):
    usersmessage = message.get_args()
    buttons = [ types.InlineKeyboardButton(text="–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç.",
                                   callback_data="k_oplate1"), types.InlineKeyboardButton(text="–î–∞–≤–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ!",
                                   callback_data="1_ch_ad") ]
    keyboard_allok = types.InlineKeyboardMarkup(row_width=1)
    keyboard_allok.add(*buttons)
#  msg_text = 
    await message.reply("–í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–∞–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è:\n\n" + usersmessage + "?", reply_markup=keyboard_allok)
    db["ad_text"] = usersmessage


@dp.callback_query_handler(text="k_oplate1")
async def oplata1(call: types.CallbackQuery):
    quickpay = Quickpay(receiver="4100117410709216",
                        quickpay_form="shop",
                        targets="–û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É",
                        paymentType="SB",
                        sum=20,
                        label= call.from_user.id)
    print()
    print("–ö—Ç–æ-—Ç–æ –ø–ª–∞—Ç–∏—Ç 20—Ä")
    print()

    buttons = [
        types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —Ç—É—Ç–∞!",
                                   url=quickpay.redirected_url),
             types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data = "open_hist")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    
    await call.message.answer(
        f"–ü–µ—Ä–µ–π–¥–µ–º –∫ –æ–ø–ª–∞—Ç–µ:\n–° –≤–∞—Å –≤–∑—ã—Å–∫–∞–Ω–æ –ø–æ —Ç–∞—Ä–∏—Ñ—É:" + cost,
        reply_markup=keyboard)


@dp.callback_query_handler(text="open_hist")
async def ope_hist(call: types.CallbackQuery):
  buttons = [
        types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å‚úâ.",
                                   callback_data="send_ad")
    ]
  keyboard_send = types.InlineKeyboardMarkup(row_width=1)
  keyboard_send.add(*buttons)
  history = client.operation_history(label=call.from_user.id)
  print("List of operations:")
  print("Next page starts with: ", history.next_record)
  for operation in history.operations:
    print()
    print("Operation:", operation.operation_id)
    print("\tStatus     -->", operation.status)
    print("\tDatetime   -->", operation.datetime)
    print("\tTitle      -->", operation.title)
    print("\tPattern id -->", operation.pattern_id)
    print("\tDirection  -->", operation.direction)
    print("\tAmount     -->", operation.amount)
    print("\tLabel      -->", operation.label)
    print("\tType       -->", operation.type)
    print()
    print()
    print("–°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏: " + operation.status)
    if operation.status == "success":
     await call.message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑!\n–ú–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –í–∞—à–µ–π —Ä–µ–∫–ª–∞–º—ã", reply_markup=keyboard_send)
  if history.operations == []:
    await call.message.answer("–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ –µ—â–µ —Ä–∞–∑!")
    print()
    print("–û–ø–ª–∞—Ç–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å!")


@dp.callback_query_handler(text="2_ch_ad")
async def new_ad_2(call: types.CallbackQuery):
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ä–µ–∫–ª–∞–º—É –Ω–∞—á–∏–Ω–∞—è —Å /ad2")




@dp.message_handler(commands="ad2")
async def text_added2(message: types.Message):
    usersmessage = message.get_args()
    buttons = [
        types.InlineKeyboardButton(text="–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç.",
                                   callback_data="k_oplate2"),
        types.InlineKeyboardButton(text="–î–∞–≤–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ!",
                                   callback_data="2_ch_ad")
    ]
    keyboard_allok = types.InlineKeyboardMarkup(row_width=1)
    keyboard_allok.add(*buttons)
    await message.reply("–í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–∞–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è:\n\n" + usersmessage + "?",
                        reply_markup=keyboard_allok)
    db["ad_text"] = usersmessage


@dp.callback_query_handler(text="k_oplate2")
async def oplata2(call: types.CallbackQuery):
    quickpay = Quickpay(receiver="44100117410709216",
                        quickpay_form="shop",
                        targets="–û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É",
                        paymentType="SB",
                        sum=50,
                        label= call.from_user.id)
    print()
    print("–ö—Ç–æ-—Ç–æ –ø–ª–∞—Ç–∏—Ç 50—Ä")
    print()

    buttons = [
        types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —Ç—É—Ç–∞!",
                                   url=quickpay.redirected_url),
             types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data = "open_hist")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    global cost
    await call.message.answer(
        f"–ü–µ—Ä–µ–π–¥–µ–º –∫ –æ–ø–ª–∞—Ç–µ:\n–° –≤–∞—Å –≤–∑—ã—Å–∫–∞–Ω–æ –ø–æ —Ç–∞—Ä–∏—Ñ—É: 50—Ä",
        reply_markup=keyboard)
    

@dp.callback_query_handler(text="5_ch_ad")
async def new_ad5(call: types.CallbackQuery):
    await call.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ä–µ–∫–ª–∞–º—É –Ω–∞—á–∏–Ω–∞—è —Å /ad5")


@dp.message_handler(commands="ad5")
async def text_added5(message: types.Message):
    usersmessage = message.get_args()
    buttons = [
        types.InlineKeyboardButton(text="–£—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç.",
                                   callback_data="k_oplate5"),
        types.InlineKeyboardButton(text="–î–∞–≤–∞–π—Ç–µ –∑–∞–Ω–æ–≤–æ!",
                                   callback_data="5_ch_ad")
    ]
    keyboard_allok = types.InlineKeyboardMarkup(row_width=1)
    keyboard_allok.add(*buttons)
    await message.reply("–í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç–∞–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è:\n\n" + usersmessage + "?",
                        reply_markup=keyboard_allok)
    db["ad_text"] = usersmessage

@dp.callback_query_handler(text="k_oplate5")
async def oplata5(call: types.CallbackQuery):
    quickpay = Quickpay(receiver="4100117410709216",
                        quickpay_form="shop",
                        targets="–û–ø–ª–∞—Ç–∞ –∑–∞ —Ä–µ–∫–ª–∞–º—É",
                        paymentType="SB",
                        sum=100,
                        label= call.from_user.id)
    print()
    print("–ö—Ç–æ-—Ç–æ –ø–ª–∞—Ç–∏—Ç 100—Ä")
    print()

    buttons = [
        types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å —Ç—É—Ç–∞!",
                                   url=quickpay.redirected_url),
             types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data = "open_hist")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    global cost
    await call.message.answer(
        f"–ü–µ—Ä–µ–π–¥–µ–º –∫ –æ–ø–ª–∞—Ç–µ:\n–° –≤–∞—Å –≤–∑—ã—Å–∫–∞–Ω–æ –ø–æ —Ç–∞—Ä–∏—Ñ—É: 100—Ä",
        reply_markup=keyboard)


@dp.callback_query_handler(text="local_chat")
async def local_chat(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã –∏ –ü–µ—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è‚úç",
                                   url="tg://resolve?domain=agosset15bot")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.reply(
        "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard)


@dp.callback_query_handler(text="pl_pay")
async def oplata(call: types.CallbackQuery):
    quickpay = Quickpay(receiver="4100117410709216",
                        quickpay_form="shop",
                        targets="–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã",
                        paymentType="SB",
                        sum=50,
                        label= call.from_user.id)
    print(quickpay.base_url)
    print(quickpay.redirected_url)

    buttons = [
        types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –∑–¥–µ—Å—å!",
                                   url=quickpay.redirected_url),
             types.InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data = "open_hist")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    global cost
    await call.message.answer(
        f"–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ –∑–∞ –ø–æ—Å–∏–ª—å–Ω—É—é –ø–æ–º–æ—â—å!\n–ü–µ—Ä–µ–π–¥–µ–º –∫ –æ–ø–ª–∞—Ç–µ:\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ –±—ã —Å–¥–µ–ª–∞—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ: 50—Ä",
        reply_markup=keyboard)


@dp.callback_query_handler(text="send_ad")
async def otpravka(call: types.CallbackQuery):
  value = db["ad_text"]
  await call.message.answer("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...")
  await bot.send_message(1440259230, "–ù–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞:\n\n" + value)
  await bot.send_message(5037678159, "–ù–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞:\n\n" + value)
  await bot.send_message(1687605952, "–ù–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞:\n\n" + value)



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
